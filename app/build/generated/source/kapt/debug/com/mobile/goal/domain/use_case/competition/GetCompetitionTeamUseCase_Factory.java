// Generated by Dagger (https://dagger.dev).
package com.mobile.goal.domain.use_case.competition;

import com.mobile.goal.domain.repository.CompetitionRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetCompetitionTeamUseCase_Factory implements Factory<GetCompetitionTeamUseCase> {
  private final Provider<CompetitionRepository> repositoryProvider;

  public GetCompetitionTeamUseCase_Factory(Provider<CompetitionRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetCompetitionTeamUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static GetCompetitionTeamUseCase_Factory create(
      Provider<CompetitionRepository> repositoryProvider) {
    return new GetCompetitionTeamUseCase_Factory(repositoryProvider);
  }

  public static GetCompetitionTeamUseCase newInstance(CompetitionRepository repository) {
    return new GetCompetitionTeamUseCase(repository);
  }
}

// Generated by Dagger (https://dagger.dev).
package com.mobile.goal;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.mobile.goal.data.local.data_store.SessionDataStore;
import com.mobile.goal.data.local.data_store.SettingsDataStore;
import com.mobile.goal.data.remote.Api;
import com.mobile.goal.di.DataStoreModule;
import com.mobile.goal.di.DataStoreModule_ProvideSessionDataStoreFactory;
import com.mobile.goal.di.DataStoreModule_ProvideSettingsDataStoreFactory;
import com.mobile.goal.di.NetworkModule;
import com.mobile.goal.di.NetworkModule_ProvideApiFactory;
import com.mobile.goal.di.OkHttpClientModule;
import com.mobile.goal.di.OkHttpClientModule_ProvideOkHttpClientFactory;
import com.mobile.goal.di.RepositoryModule;
import com.mobile.goal.di.RepositoryModule_ProvideAuthRepositoryFactory;
import com.mobile.goal.di.RepositoryModule_ProvideChallengeRepositoryFactory;
import com.mobile.goal.di.RepositoryModule_ProvideCompetitionRepositoryFactory;
import com.mobile.goal.di.RepositoryModule_ProvideUserRepositoryFactory;
import com.mobile.goal.di.RepositoryModule_ProvideWorkoutRepositoryFactory;
import com.mobile.goal.domain.repository.AuthRepository;
import com.mobile.goal.domain.repository.ChallengeRepository;
import com.mobile.goal.domain.repository.CompetitionRepository;
import com.mobile.goal.domain.repository.UserRepository;
import com.mobile.goal.domain.repository.WorkoutRepository;
import com.mobile.goal.domain.use_case.ChangePasswordUseCase;
import com.mobile.goal.domain.use_case.EditAccountUseCase;
import com.mobile.goal.domain.use_case.GetAboutMeUseCase;
import com.mobile.goal.domain.use_case.GetFBSessionTokenUseCase;
import com.mobile.goal.domain.use_case.GetGoalUseCase;
import com.mobile.goal.domain.use_case.GetParticipantUseCase;
import com.mobile.goal.domain.use_case.GetWorkoutTypeListUseCase;
import com.mobile.goal.domain.use_case.LoginEmailUseCase;
import com.mobile.goal.domain.use_case.RegisterEmailUseCase;
import com.mobile.goal.domain.use_case.RequestTokenUseCase;
import com.mobile.goal.domain.use_case.SetGoalUseCase;
import com.mobile.goal.domain.use_case.SignInFacebookUseCase;
import com.mobile.goal.domain.use_case.SignInGoogleUseCase;
import com.mobile.goal.domain.use_case.UpdateProfileUseCase;
import com.mobile.goal.domain.use_case.challenge.GetChallengeUseCase;
import com.mobile.goal.domain.use_case.competition.GetCompetitionUseCase;
import com.mobile.goal.ui.challenge.EventsViewModel;
import com.mobile.goal.ui.challenge.EventsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.daily_goal.DailyGoalsViewModel;
import com.mobile.goal.ui.daily_goal.DailyGoalsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.home.HomeViewModel;
import com.mobile.goal.ui.home.HomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.onboarding.complete_profile.CompleteProfilelViewModel;
import com.mobile.goal.ui.onboarding.complete_profile.CompleteProfilelViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.onboarding.intro.IntroViewModel;
import com.mobile.goal.ui.onboarding.intro.IntroViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.onboarding.login_email.LoginEmailViewModel;
import com.mobile.goal.ui.onboarding.login_email.LoginEmailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.onboarding.register.RegisterEmailViewModel;
import com.mobile.goal.ui.onboarding.register.RegisterEmailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.onboarding.welcome.WelcomeViewModel;
import com.mobile.goal.ui.onboarding.welcome.WelcomeViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.profile.settings.SettingsViewModel;
import com.mobile.goal.ui.profile.settings.SettingsViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.profile.settings.change_password.ChangePasswordViewModel;
import com.mobile.goal.ui.profile.settings.change_password.ChangePasswordViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.profile.settings.edit_account.EditAccountViewModel;
import com.mobile.goal.ui.profile.settings.edit_account.EditAccountViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.splash.SplashViewModel;
import com.mobile.goal.ui.splash.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import com.mobile.goal.ui.workout.WorkoutViewModel;
import com.mobile.goal.ui.workout.WorkoutViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC extends App_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerApp_HiltComponents_SingletonC singletonC = this;

  private volatile Object sessionDataStore = new MemoizedSentinel();

  private volatile Object okHttpClient = new MemoizedSentinel();

  private volatile Object api = new MemoizedSentinel();

  private volatile Object userRepository = new MemoizedSentinel();

  private volatile Object challengeRepository = new MemoizedSentinel();

  private volatile Object competitionRepository = new MemoizedSentinel();

  private volatile Object settingsDataStore = new MemoizedSentinel();

  private volatile Object authRepository = new MemoizedSentinel();

  private volatile Object workoutRepository = new MemoizedSentinel();

  private DaggerApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;

  }

  public static Builder builder() {
    return new Builder();
  }

  private SessionDataStore sessionDataStore() {
    Object local = sessionDataStore;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = sessionDataStore;
        if (local instanceof MemoizedSentinel) {
          local = DataStoreModule_ProvideSessionDataStoreFactory.provideSessionDataStore(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          sessionDataStore = DoubleCheck.reentrantCheck(sessionDataStore, local);
        }
      }
    }
    return (SessionDataStore) local;
  }

  private OkHttpClient okHttpClient() {
    Object local = okHttpClient;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = okHttpClient;
        if (local instanceof MemoizedSentinel) {
          local = OkHttpClientModule_ProvideOkHttpClientFactory.provideOkHttpClient(sessionDataStore());
          okHttpClient = DoubleCheck.reentrantCheck(okHttpClient, local);
        }
      }
    }
    return (OkHttpClient) local;
  }

  private Api api() {
    Object local = api;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = api;
        if (local instanceof MemoizedSentinel) {
          local = NetworkModule_ProvideApiFactory.provideApi(okHttpClient());
          api = DoubleCheck.reentrantCheck(api, local);
        }
      }
    }
    return (Api) local;
  }

  private UserRepository userRepository() {
    Object local = userRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = userRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProvideUserRepositoryFactory.provideUserRepository(api());
          userRepository = DoubleCheck.reentrantCheck(userRepository, local);
        }
      }
    }
    return (UserRepository) local;
  }

  private ChallengeRepository challengeRepository() {
    Object local = challengeRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = challengeRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProvideChallengeRepositoryFactory.provideChallengeRepository(api());
          challengeRepository = DoubleCheck.reentrantCheck(challengeRepository, local);
        }
      }
    }
    return (ChallengeRepository) local;
  }

  private CompetitionRepository competitionRepository() {
    Object local = competitionRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = competitionRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProvideCompetitionRepositoryFactory.provideCompetitionRepository(api());
          competitionRepository = DoubleCheck.reentrantCheck(competitionRepository, local);
        }
      }
    }
    return (CompetitionRepository) local;
  }

  private SettingsDataStore settingsDataStore() {
    Object local = settingsDataStore;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = settingsDataStore;
        if (local instanceof MemoizedSentinel) {
          local = DataStoreModule_ProvideSettingsDataStoreFactory.provideSettingsDataStore(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          settingsDataStore = DoubleCheck.reentrantCheck(settingsDataStore, local);
        }
      }
    }
    return (SettingsDataStore) local;
  }

  private AuthRepository authRepository() {
    Object local = authRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = authRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProvideAuthRepositoryFactory.provideAuthRepository(api());
          authRepository = DoubleCheck.reentrantCheck(authRepository, local);
        }
      }
    }
    return (AuthRepository) local;
  }

  private WorkoutRepository workoutRepository() {
    Object local = workoutRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = workoutRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProvideWorkoutRepositoryFactory.provideWorkoutRepository(api());
          workoutRepository = DoubleCheck.reentrantCheck(workoutRepository, local);
        }
      }
    }
    return (WorkoutRepository) local;
  }

  @Override
  public void injectApp(App app) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder dataStoreModule(DataStoreModule dataStoreModule) {
      Preconditions.checkNotNull(dataStoreModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder okHttpClientModule(OkHttpClientModule okHttpClientModule) {
      Preconditions.checkNotNull(okHttpClientModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder repositoryModule(RepositoryModule repositoryModule) {
      Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DaggerApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;


    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private static final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
      private final DaggerApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private Activity activity;

      private ActivityCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public App_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
      }
    }

    private static final class ActivityCImpl extends App_HiltComponents.ActivityC {
      private final DaggerApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ActivityCImpl activityCImpl = this;

      private ActivityCImpl(DaggerApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(13).add(ChangePasswordViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(CompleteProfilelViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(DailyGoalsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EditAccountViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EventsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(IntroViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginEmailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RegisterEmailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SettingsViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(WelcomeViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(WorkoutViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
      }

      private static final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
        private final DaggerApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private Fragment fragment;

        private FragmentCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public App_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragment);
        }
      }

      private static final class FragmentCI extends App_HiltComponents.FragmentC {
        private final DaggerApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final FragmentCI fragmentCI = this;

        private FragmentCI(DaggerApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            Fragment fragmentParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return activityCImpl.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI);
        }

        private static final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
          private final DaggerApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private View view;

          private ViewWithFragmentCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;
          }

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public App_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(singletonC, activityRetainedCImpl, activityCImpl, fragmentCI, view);
          }
        }

        private static final class ViewWithFragmentCI extends App_HiltComponents.ViewWithFragmentC {
          private final DaggerApp_HiltComponents_SingletonC singletonC;

          private final ActivityRetainedCImpl activityRetainedCImpl;

          private final ActivityCImpl activityCImpl;

          private final FragmentCI fragmentCI;

          private final ViewWithFragmentCI viewWithFragmentCI = this;

          private ViewWithFragmentCI(DaggerApp_HiltComponents_SingletonC singletonC,
              ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
              FragmentCI fragmentCI, View viewParam) {
            this.singletonC = singletonC;
            this.activityRetainedCImpl = activityRetainedCImpl;
            this.activityCImpl = activityCImpl;
            this.fragmentCI = fragmentCI;


          }
        }
      }

      private static final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
        private final DaggerApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private View view;

        private ViewCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;
        }

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public App_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(singletonC, activityRetainedCImpl, activityCImpl, view);
        }
      }

      private static final class ViewCI extends App_HiltComponents.ViewC {
        private final DaggerApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ActivityCImpl activityCImpl;

        private final ViewCI viewCI = this;

        private ViewCI(DaggerApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
            View viewParam) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.activityCImpl = activityCImpl;


        }
      }
    }

    private static final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
      private final DaggerApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private SavedStateHandle savedStateHandle;

      private ViewModelCBuilder(DaggerApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
      }

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public App_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
      }
    }

    private static final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
      private final DaggerApp_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl = this;

      private volatile Provider<ChangePasswordViewModel> changePasswordViewModelProvider;

      private volatile Provider<CompleteProfilelViewModel> completeProfilelViewModelProvider;

      private volatile Provider<DailyGoalsViewModel> dailyGoalsViewModelProvider;

      private volatile Provider<EditAccountViewModel> editAccountViewModelProvider;

      private volatile Provider<EventsViewModel> eventsViewModelProvider;

      private volatile Provider<HomeViewModel> homeViewModelProvider;

      private volatile Provider<IntroViewModel> introViewModelProvider;

      private volatile Provider<LoginEmailViewModel> loginEmailViewModelProvider;

      private volatile Provider<RegisterEmailViewModel> registerEmailViewModelProvider;

      private volatile Provider<SettingsViewModel> settingsViewModelProvider;

      private volatile Provider<SplashViewModel> splashViewModelProvider;

      private volatile Provider<WelcomeViewModel> welcomeViewModelProvider;

      private volatile Provider<WorkoutViewModel> workoutViewModelProvider;

      private ViewModelCImpl(DaggerApp_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;


      }

      private ChangePasswordUseCase changePasswordUseCase() {
        return new ChangePasswordUseCase(singletonC.userRepository());
      }

      private ChangePasswordViewModel changePasswordViewModel() {
        return new ChangePasswordViewModel(changePasswordUseCase());
      }

      private Provider<ChangePasswordViewModel> changePasswordViewModelProvider() {
        Object local = changePasswordViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
          changePasswordViewModelProvider = (Provider<ChangePasswordViewModel>) local;
        }
        return (Provider<ChangePasswordViewModel>) local;
      }

      private UpdateProfileUseCase updateProfileUseCase() {
        return new UpdateProfileUseCase(singletonC.userRepository());
      }

      private CompleteProfilelViewModel completeProfilelViewModel() {
        return new CompleteProfilelViewModel(updateProfileUseCase(), singletonC.sessionDataStore());
      }

      private Provider<CompleteProfilelViewModel> completeProfilelViewModelProvider() {
        Object local = completeProfilelViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
          completeProfilelViewModelProvider = (Provider<CompleteProfilelViewModel>) local;
        }
        return (Provider<CompleteProfilelViewModel>) local;
      }

      private SetGoalUseCase setGoalUseCase() {
        return new SetGoalUseCase(singletonC.userRepository());
      }

      private GetGoalUseCase getGoalUseCase() {
        return new GetGoalUseCase(singletonC.userRepository());
      }

      private DailyGoalsViewModel dailyGoalsViewModel() {
        return new DailyGoalsViewModel(setGoalUseCase(), getGoalUseCase());
      }

      private Provider<DailyGoalsViewModel> dailyGoalsViewModelProvider() {
        Object local = dailyGoalsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
          dailyGoalsViewModelProvider = (Provider<DailyGoalsViewModel>) local;
        }
        return (Provider<DailyGoalsViewModel>) local;
      }

      private EditAccountUseCase editAccountUseCase() {
        return new EditAccountUseCase(singletonC.userRepository());
      }

      private EditAccountViewModel editAccountViewModel() {
        return new EditAccountViewModel(editAccountUseCase(), singletonC.sessionDataStore());
      }

      private Provider<EditAccountViewModel> editAccountViewModelProvider() {
        Object local = editAccountViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
          editAccountViewModelProvider = (Provider<EditAccountViewModel>) local;
        }
        return (Provider<EditAccountViewModel>) local;
      }

      private GetChallengeUseCase getChallengeUseCase() {
        return new GetChallengeUseCase(singletonC.challengeRepository());
      }

      private EventsViewModel eventsViewModel() {
        return new EventsViewModel(getChallengeUseCase());
      }

      private Provider<EventsViewModel> eventsViewModelProvider() {
        Object local = eventsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 4);
          eventsViewModelProvider = (Provider<EventsViewModel>) local;
        }
        return (Provider<EventsViewModel>) local;
      }

      private GetCompetitionUseCase getCompetitionUseCase() {
        return new GetCompetitionUseCase(singletonC.competitionRepository());
      }

      private HomeViewModel homeViewModel() {
        return new HomeViewModel(getChallengeUseCase(), getCompetitionUseCase());
      }

      private Provider<HomeViewModel> homeViewModelProvider() {
        Object local = homeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 5);
          homeViewModelProvider = (Provider<HomeViewModel>) local;
        }
        return (Provider<HomeViewModel>) local;
      }

      private IntroViewModel introViewModel() {
        return new IntroViewModel(singletonC.settingsDataStore());
      }

      private Provider<IntroViewModel> introViewModelProvider() {
        Object local = introViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 6);
          introViewModelProvider = (Provider<IntroViewModel>) local;
        }
        return (Provider<IntroViewModel>) local;
      }

      private LoginEmailUseCase loginEmailUseCase() {
        return new LoginEmailUseCase(singletonC.authRepository());
      }

      private RequestTokenUseCase requestTokenUseCase() {
        return new RequestTokenUseCase(singletonC.authRepository(), singletonC.sessionDataStore());
      }

      private GetAboutMeUseCase getAboutMeUseCase() {
        return new GetAboutMeUseCase(singletonC.userRepository());
      }

      private LoginEmailViewModel loginEmailViewModel() {
        return new LoginEmailViewModel(loginEmailUseCase(), requestTokenUseCase(), getAboutMeUseCase(), singletonC.sessionDataStore());
      }

      private Provider<LoginEmailViewModel> loginEmailViewModelProvider() {
        Object local = loginEmailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 7);
          loginEmailViewModelProvider = (Provider<LoginEmailViewModel>) local;
        }
        return (Provider<LoginEmailViewModel>) local;
      }

      private RegisterEmailUseCase registerEmailUseCase() {
        return new RegisterEmailUseCase(singletonC.authRepository());
      }

      private RegisterEmailViewModel registerEmailViewModel() {
        return new RegisterEmailViewModel(registerEmailUseCase(), updateProfileUseCase(), requestTokenUseCase(), singletonC.sessionDataStore());
      }

      private Provider<RegisterEmailViewModel> registerEmailViewModelProvider() {
        Object local = registerEmailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 8);
          registerEmailViewModelProvider = (Provider<RegisterEmailViewModel>) local;
        }
        return (Provider<RegisterEmailViewModel>) local;
      }

      private GetParticipantUseCase getParticipantUseCase() {
        return new GetParticipantUseCase(singletonC.userRepository());
      }

      private SettingsViewModel settingsViewModel() {
        return new SettingsViewModel(singletonC.sessionDataStore(), getParticipantUseCase(), getAboutMeUseCase());
      }

      private Provider<SettingsViewModel> settingsViewModelProvider() {
        Object local = settingsViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 9);
          settingsViewModelProvider = (Provider<SettingsViewModel>) local;
        }
        return (Provider<SettingsViewModel>) local;
      }

      private SplashViewModel splashViewModel() {
        return new SplashViewModel(singletonC.sessionDataStore(), singletonC.settingsDataStore());
      }

      private Provider<SplashViewModel> splashViewModelProvider() {
        Object local = splashViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 10);
          splashViewModelProvider = (Provider<SplashViewModel>) local;
        }
        return (Provider<SplashViewModel>) local;
      }

      private SignInGoogleUseCase signInGoogleUseCase() {
        return new SignInGoogleUseCase(singletonC.authRepository());
      }

      private GetFBSessionTokenUseCase getFBSessionTokenUseCase() {
        return new GetFBSessionTokenUseCase(singletonC.authRepository());
      }

      private SignInFacebookUseCase signInFacebookUseCase() {
        return new SignInFacebookUseCase(singletonC.authRepository());
      }

      private WelcomeViewModel welcomeViewModel() {
        return new WelcomeViewModel(signInGoogleUseCase(), getFBSessionTokenUseCase(), signInFacebookUseCase(), requestTokenUseCase(), getAboutMeUseCase(), singletonC.sessionDataStore());
      }

      private Provider<WelcomeViewModel> welcomeViewModelProvider() {
        Object local = welcomeViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 11);
          welcomeViewModelProvider = (Provider<WelcomeViewModel>) local;
        }
        return (Provider<WelcomeViewModel>) local;
      }

      private GetWorkoutTypeListUseCase getWorkoutTypeListUseCase() {
        return new GetWorkoutTypeListUseCase(singletonC.workoutRepository());
      }

      private WorkoutViewModel workoutViewModel() {
        return new WorkoutViewModel(getWorkoutTypeListUseCase());
      }

      private Provider<WorkoutViewModel> workoutViewModelProvider() {
        Object local = workoutViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 12);
          workoutViewModelProvider = (Provider<WorkoutViewModel>) local;
        }
        return (Provider<WorkoutViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(13).put("com.mobile.goal.ui.profile.settings.change_password.ChangePasswordViewModel", (Provider) changePasswordViewModelProvider()).put("com.mobile.goal.ui.onboarding.complete_profile.CompleteProfilelViewModel", (Provider) completeProfilelViewModelProvider()).put("com.mobile.goal.ui.daily_goal.DailyGoalsViewModel", (Provider) dailyGoalsViewModelProvider()).put("com.mobile.goal.ui.profile.settings.edit_account.EditAccountViewModel", (Provider) editAccountViewModelProvider()).put("com.mobile.goal.ui.challenge.EventsViewModel", (Provider) eventsViewModelProvider()).put("com.mobile.goal.ui.home.HomeViewModel", (Provider) homeViewModelProvider()).put("com.mobile.goal.ui.onboarding.intro.IntroViewModel", (Provider) introViewModelProvider()).put("com.mobile.goal.ui.onboarding.login_email.LoginEmailViewModel", (Provider) loginEmailViewModelProvider()).put("com.mobile.goal.ui.onboarding.register.RegisterEmailViewModel", (Provider) registerEmailViewModelProvider()).put("com.mobile.goal.ui.profile.settings.SettingsViewModel", (Provider) settingsViewModelProvider()).put("com.mobile.goal.ui.splash.SplashViewModel", (Provider) splashViewModelProvider()).put("com.mobile.goal.ui.onboarding.welcome.WelcomeViewModel", (Provider) welcomeViewModelProvider()).put("com.mobile.goal.ui.workout.WorkoutViewModel", (Provider) workoutViewModelProvider()).build();
      }

      private static final class SwitchingProvider<T> implements Provider<T> {
        private final DaggerApp_HiltComponents_SingletonC singletonC;

        private final ActivityRetainedCImpl activityRetainedCImpl;

        private final ViewModelCImpl viewModelCImpl;

        private final int id;

        SwitchingProvider(DaggerApp_HiltComponents_SingletonC singletonC,
            ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
          this.singletonC = singletonC;
          this.activityRetainedCImpl = activityRetainedCImpl;
          this.viewModelCImpl = viewModelCImpl;
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.mobile.goal.ui.profile.settings.change_password.ChangePasswordViewModel 
            return (T) viewModelCImpl.changePasswordViewModel();

            case 1: // com.mobile.goal.ui.onboarding.complete_profile.CompleteProfilelViewModel 
            return (T) viewModelCImpl.completeProfilelViewModel();

            case 2: // com.mobile.goal.ui.daily_goal.DailyGoalsViewModel 
            return (T) viewModelCImpl.dailyGoalsViewModel();

            case 3: // com.mobile.goal.ui.profile.settings.edit_account.EditAccountViewModel 
            return (T) viewModelCImpl.editAccountViewModel();

            case 4: // com.mobile.goal.ui.challenge.EventsViewModel 
            return (T) viewModelCImpl.eventsViewModel();

            case 5: // com.mobile.goal.ui.home.HomeViewModel 
            return (T) viewModelCImpl.homeViewModel();

            case 6: // com.mobile.goal.ui.onboarding.intro.IntroViewModel 
            return (T) viewModelCImpl.introViewModel();

            case 7: // com.mobile.goal.ui.onboarding.login_email.LoginEmailViewModel 
            return (T) viewModelCImpl.loginEmailViewModel();

            case 8: // com.mobile.goal.ui.onboarding.register.RegisterEmailViewModel 
            return (T) viewModelCImpl.registerEmailViewModel();

            case 9: // com.mobile.goal.ui.profile.settings.SettingsViewModel 
            return (T) viewModelCImpl.settingsViewModel();

            case 10: // com.mobile.goal.ui.splash.SplashViewModel 
            return (T) viewModelCImpl.splashViewModel();

            case 11: // com.mobile.goal.ui.onboarding.welcome.WelcomeViewModel 
            return (T) viewModelCImpl.welcomeViewModel();

            case 12: // com.mobile.goal.ui.workout.WorkoutViewModel 
            return (T) viewModelCImpl.workoutViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private static final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerApp_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private final DaggerApp_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerApp_HiltComponents_SingletonC singletonC, Service serviceParam) {
      this.singletonC = singletonC;


    }
  }
}

// Generated by Dagger (https://dagger.dev).
package com.mobile.goal.di;

import com.mobile.goal.data.local.data_store.SessionDataStore;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OkHttpClientModule_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<SessionDataStore> sessionDataStoreProvider;

  public OkHttpClientModule_ProvideOkHttpClientFactory(
      Provider<SessionDataStore> sessionDataStoreProvider) {
    this.sessionDataStoreProvider = sessionDataStoreProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(sessionDataStoreProvider.get());
  }

  public static OkHttpClientModule_ProvideOkHttpClientFactory create(
      Provider<SessionDataStore> sessionDataStoreProvider) {
    return new OkHttpClientModule_ProvideOkHttpClientFactory(sessionDataStoreProvider);
  }

  public static OkHttpClient provideOkHttpClient(SessionDataStore sessionDataStore) {
    return Preconditions.checkNotNullFromProvides(OkHttpClientModule.INSTANCE.provideOkHttpClient(sessionDataStore));
  }
}

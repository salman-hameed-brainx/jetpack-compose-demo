// Generated by Dagger (https://dagger.dev).
package com.mobile.goal.ui.home;

import com.mobile.goal.domain.use_case.challenge.GetChallengeUseCase;
import com.mobile.goal.domain.use_case.competition.GetCompetitionUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class HomeViewModel_Factory implements Factory<HomeViewModel> {
  private final Provider<GetChallengeUseCase> challengeUseCaseProvider;

  private final Provider<GetCompetitionUseCase> competitionUseCaseProvider;

  public HomeViewModel_Factory(Provider<GetChallengeUseCase> challengeUseCaseProvider,
      Provider<GetCompetitionUseCase> competitionUseCaseProvider) {
    this.challengeUseCaseProvider = challengeUseCaseProvider;
    this.competitionUseCaseProvider = competitionUseCaseProvider;
  }

  @Override
  public HomeViewModel get() {
    return newInstance(challengeUseCaseProvider.get(), competitionUseCaseProvider.get());
  }

  public static HomeViewModel_Factory create(Provider<GetChallengeUseCase> challengeUseCaseProvider,
      Provider<GetCompetitionUseCase> competitionUseCaseProvider) {
    return new HomeViewModel_Factory(challengeUseCaseProvider, competitionUseCaseProvider);
  }

  public static HomeViewModel newInstance(GetChallengeUseCase challengeUseCase,
      GetCompetitionUseCase competitionUseCase) {
    return new HomeViewModel(challengeUseCase, competitionUseCase);
  }
}

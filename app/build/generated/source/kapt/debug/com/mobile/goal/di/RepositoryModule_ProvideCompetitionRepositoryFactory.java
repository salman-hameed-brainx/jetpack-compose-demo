// Generated by Dagger (https://dagger.dev).
package com.mobile.goal.di;

import com.mobile.goal.data.remote.Api;
import com.mobile.goal.domain.repository.CompetitionRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideCompetitionRepositoryFactory implements Factory<CompetitionRepository> {
  private final Provider<Api> apiProvider;

  public RepositoryModule_ProvideCompetitionRepositoryFactory(Provider<Api> apiProvider) {
    this.apiProvider = apiProvider;
  }

  @Override
  public CompetitionRepository get() {
    return provideCompetitionRepository(apiProvider.get());
  }

  public static RepositoryModule_ProvideCompetitionRepositoryFactory create(
      Provider<Api> apiProvider) {
    return new RepositoryModule_ProvideCompetitionRepositoryFactory(apiProvider);
  }

  public static CompetitionRepository provideCompetitionRepository(Api api) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideCompetitionRepository(api));
  }
}

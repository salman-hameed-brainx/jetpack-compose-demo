// Generated by Dagger (https://dagger.dev).
package com.mobile.goal.domain.use_case.challenge;

import com.mobile.goal.domain.repository.ChallengeRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetChallengeDetailUseCase_Factory implements Factory<GetChallengeDetailUseCase> {
  private final Provider<ChallengeRepository> repositoryProvider;

  public GetChallengeDetailUseCase_Factory(Provider<ChallengeRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public GetChallengeDetailUseCase get() {
    return newInstance(repositoryProvider.get());
  }

  public static GetChallengeDetailUseCase_Factory create(
      Provider<ChallengeRepository> repositoryProvider) {
    return new GetChallengeDetailUseCase_Factory(repositoryProvider);
  }

  public static GetChallengeDetailUseCase newInstance(ChallengeRepository repository) {
    return new GetChallengeDetailUseCase(repository);
  }
}

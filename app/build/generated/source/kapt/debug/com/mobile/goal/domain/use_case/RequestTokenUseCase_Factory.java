// Generated by Dagger (https://dagger.dev).
package com.mobile.goal.domain.use_case;

import com.mobile.goal.data.local.data_store.SessionDataStore;
import com.mobile.goal.domain.repository.AuthRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RequestTokenUseCase_Factory implements Factory<RequestTokenUseCase> {
  private final Provider<AuthRepository> repositoryProvider;

  private final Provider<SessionDataStore> sessionDataStoreProvider;

  public RequestTokenUseCase_Factory(Provider<AuthRepository> repositoryProvider,
      Provider<SessionDataStore> sessionDataStoreProvider) {
    this.repositoryProvider = repositoryProvider;
    this.sessionDataStoreProvider = sessionDataStoreProvider;
  }

  @Override
  public RequestTokenUseCase get() {
    return newInstance(repositoryProvider.get(), sessionDataStoreProvider.get());
  }

  public static RequestTokenUseCase_Factory create(Provider<AuthRepository> repositoryProvider,
      Provider<SessionDataStore> sessionDataStoreProvider) {
    return new RequestTokenUseCase_Factory(repositoryProvider, sessionDataStoreProvider);
  }

  public static RequestTokenUseCase newInstance(AuthRepository repository,
      SessionDataStore sessionDataStore) {
    return new RequestTokenUseCase(repository, sessionDataStore);
  }
}

// Generated by Dagger (https://dagger.dev).
package com.mobile.goal.ui.challenge;

import com.mobile.goal.domain.use_case.challenge.GetChallengeUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class EventsViewModel_Factory implements Factory<EventsViewModel> {
  private final Provider<GetChallengeUseCase> challengeUseCaseProvider;

  public EventsViewModel_Factory(Provider<GetChallengeUseCase> challengeUseCaseProvider) {
    this.challengeUseCaseProvider = challengeUseCaseProvider;
  }

  @Override
  public EventsViewModel get() {
    return newInstance(challengeUseCaseProvider.get());
  }

  public static EventsViewModel_Factory create(
      Provider<GetChallengeUseCase> challengeUseCaseProvider) {
    return new EventsViewModel_Factory(challengeUseCaseProvider);
  }

  public static EventsViewModel newInstance(GetChallengeUseCase challengeUseCase) {
    return new EventsViewModel(challengeUseCase);
  }
}
